import os
import asyncio
import logging
import json
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from selenium import webdriver
from selenium.webdriver.chromium.options import ChromiumOptions
from selenium.webdriver.chromium.service import ChromiumService
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException
from contextlib import asynccontextmanager

logging.basicConfig(level=logging.INFO)

TOKEN = "8124092472:AAFb5G_JplnZr8SE8lkgJ5qahU4yFbR5RfU"
ACCOUNTS_FILE = "accounts.json"
STATUS_FILE = "status.json"
NOTIFICATIONS_FILE = "notifications.json"
WORKERS_FILE = "workers.json"
CONFIG_FILE = "config.json"
ACTIVE_SESSIONS_FILE = "active_sessions.json"

if not os.path.exists("data"):
    os.makedirs("data")


def load_active_sessions():
    try:
        with open(ACTIVE_SESSIONS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}


def save_active_sessions(data):
    with open(ACTIVE_SESSIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4)


active_monitoring_sessions = load_active_sessions()


def ensure_account_folder(email, category=None):
    account_folder = os.path.join("data", email)
    if not os.path.exists(account_folder):
        os.makedirs(account_folder)

    if category:
        category_folder = os.path.join(account_folder, category.lower())
        if not os.path.exists(category_folder):
            os.makedirs(category_folder)
        return category_folder

    return account_folder


def load_chat_statuses(email, category=None):
    if category:
        account_folder = ensure_account_folder(email, category)
    else:
        account_folder = ensure_account_folder(email)

    static_users_file = os.path.join(account_folder, "static_users.json")
    if not os.path.exists(static_users_file):
        return {}

    static_users = load_json("static_users.json", email, category)

    all_statuses = {}

    for filename in os.listdir(account_folder):
        if filename.startswith("chat_statuses_page_") and filename.endswith(".json"):
            filepath = os.path.join(account_folder, filename)
            try:
                with open(filepath, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    filtered_data = {user: data[user] for user in data if user in static_users}
                    all_statuses.update(filtered_data)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {filename}: {e}")

    return all_statuses


def load_config():
    try:
        with open(CONFIG_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        default_config = {
            "admin_login": "admin",
            "admin_password": "admin123"
        }
        with open(CONFIG_FILE, "w", encoding="utf-8") as f:
            json.dump(default_config, f, indent=4)
        return default_config


def load_workers():
    try:
        with open(WORKERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}


def load_json(filename, email=None, category=None):
    if email:
        if category:
            account_folder = ensure_account_folder(email, category)
        else:
            account_folder = ensure_account_folder(email)
        filepath = os.path.join(account_folder, filename)
    else:
        filepath = os.path.join("data", filename)

    try:
        with open(filepath, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}


def save_json(filename, data, email=None, category=None):
    if email:
        if category:
            account_folder = ensure_account_folder(email, category)
        else:
            account_folder = ensure_account_folder(email)
        filepath = os.path.join(account_folder, filename)
    else:
        filepath = os.path.join("data", filename)

    with open(filepath, "w") as f:
        json.dump(data, f, indent=4)


def save_to_json(data, email, category, filename="chat_statuses.json"):
    category_folder = ensure_account_folder(email, category)
    filepath = os.path.join(category_folder, filename)
    with open(filepath, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)


def merge_json_files(email, category, output_filename="all_chat_statuses.json"):
    category_folder = ensure_account_folder(email, category)
    all_data = {}

    for filename in os.listdir(category_folder):
        if filename.startswith("chat_statuses_page_") and filename.endswith(".json"):
            filepath = os.path.join(category_folder, filename)
            with open(filepath, "r", encoding="utf-8") as f:
                data = json.load(f)
                all_data.update(data)

    output_filepath = os.path.join(category_folder, output_filename)
    with open(output_filepath, "w", encoding="utf-8") as f:
        json.dump(all_data, f, indent=4, ensure_ascii=False)


def split_message(text, max_length=4096):
    return [text[i:i + max_length] for i in range(0, len(text), max_length)]


bot = Bot(token=TOKEN)
dp = Dispatcher()
accounts = load_json(ACCOUNTS_FILE)
prev_statuses = load_json(STATUS_FILE)
notifications = load_json(NOTIFICATIONS_FILE)
user_states = {}
monitoring_active = {}
user_drivers = {}
active_sessions = {}
user_lists = {}
config = load_config()
workers = load_workers()


def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ")],
            [KeyboardButton(text="–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")],
        ],
        resize_keyboard=True
    )


def admin_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ (–º–æ–¥–µ–ª–∏/—Ä–∞–±–æ—Ç–Ω–∏–∫–∏)")],
            [KeyboardButton(text="–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")]
        ],
        resize_keyboard=True
    )


def admin_back_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ (–ê–¥–º–∏–Ω)")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )


def models_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é"), KeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å —Å–µ—Å—Å–∏—é")],
            [KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ù–µ–π—Ä–æ—Å–µ—Ç–∏")],
            [KeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")],
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ (–ê–¥–º–∏–Ω)")],
            [KeyboardButton(text="–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")]
        ],
        resize_keyboard=True
    )


def monitoring_menu(user_id=None):
    chat_id = str(user_id)
    keyboard = [
        [KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏–∏")],
        [KeyboardButton(text="–¢–µ–∫—É—â–∏–π –æ–Ω–ª–∞–π–Ω")],
    ]

    all_notifications_enabled = True
    if chat_id in notifications:
        all_notifications_enabled = all(
            notifications[chat_id][email][category]["enabled"]
            for email in notifications[chat_id]
            for category in notifications[chat_id][email]
        )

    toggle_button_text = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥" if all_notifications_enabled else "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
    keyboard.append([KeyboardButton(text=toggle_button_text)])

    keyboard.append([KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])

    if user_id and user_id in active_sessions and active_sessions[user_id]:
        keyboard.insert(0, [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å –∫ —Å–µ—Å—Å–∏–∏")])

    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def back_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
        ],
        resize_keyboard=True
    )


def workers_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞")],
            [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞")],
            [KeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ (–†–∞–±–æ—Ç–Ω–∏–∫)")],
            [KeyboardButton(text="–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")]
        ],
        resize_keyboard=True
    )


def workers_back_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ (–†–∞–±–æ—Ç–Ω–∏–∫)")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )


def monitoring_section_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="Subscribers")],
            [KeyboardButton(text="VIPs")],
            [KeyboardButton(text="Followers")],
            [KeyboardButton(text="All")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )


async def start_monitoring_for_admin(email, category, driver, chat_id):
    active_sessions_data = load_active_sessions()

    if email not in active_sessions_data:
        active_sessions_data[email] = {
            "username": accounts[email]["username"],
            "categories": {
                category: {
                    "chat_ids": []
                }
            }
        }
    else:
        if category not in active_sessions_data[email]["categories"]:
            active_sessions_data[email]["categories"][category] = {
                "chat_ids": []
            }

    save_active_sessions(active_sessions_data)

    task = asyncio.create_task(monitor_users(email, driver, chat_id, None, category))
    if email not in active_monitoring_sessions:
        active_monitoring_sessions[email] = {}
    if category not in active_monitoring_sessions[email]:
        active_monitoring_sessions[email][category] = {
            "driver": driver,
            "task": task,
            "chat_ids": active_sessions_data[email]["categories"][category]["chat_ids"]
        }

    user_id = chat_id
    if user_id in user_states and user_states[user_id].get("is_admin", False):
        await bot.send_message(chat_id,
                               f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –º–æ–¥–µ–ª–∏ {accounts[email]['username']} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}) –∑–∞–ø—É—â–µ–Ω.",
                               reply_markup=admin_main_menu())


async def restore_monitoring_sessions():
    active_sessions_data = load_active_sessions()

    for email, data in active_sessions_data.items():
        for category, session_data in data.get("categories", {}).items():
            chat_ids = session_data["chat_ids"]
            driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))
            task = asyncio.create_task(monitor_users(email, driver, chat_ids[0], None, category))
            if email not in active_monitoring_sessions:
                active_monitoring_sessions[email] = {}
            active_monitoring_sessions[email][category] = {
                "driver": driver,
                "task": task,
                "chat_ids": chat_ids
            }


async def connect_user_to_monitoring(email, category, chat_id):
    active_sessions_data = load_active_sessions()

    if email in active_sessions_data and category in active_sessions_data[email].get("categories", {}):
        chat_id_str = str(chat_id)
        if chat_id_str not in active_sessions_data[email]["categories"][category]["chat_ids"]:
            active_sessions_data[email]["categories"][category]["chat_ids"].append(chat_id_str)
            save_active_sessions(active_sessions_data)

        if email in active_monitoring_sessions and category in active_monitoring_sessions[email]:
            if chat_id_str not in active_monitoring_sessions[email][category]["chat_ids"]:
                active_monitoring_sessions[email][category]["chat_ids"].append(chat_id_str)

        if chat_id_str not in notifications:
            notifications[chat_id_str] = {}
        if email not in notifications[chat_id_str]:
            notifications[chat_id_str][email] = {}
        if category not in notifications[chat_id_str][email]:
            notifications[chat_id_str][email][category] = {"enabled": True}

        save_json(NOTIFICATIONS_FILE, notifications)

        await bot.send_message(chat_id, f"‚úÖ –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É –º–æ–¥–µ–ª–∏ {accounts[email]['username']} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}).", reply_markup=monitoring_menu(chat_id))
    else:
        await bot.send_message(chat_id, f"‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –º–æ–¥–µ–ª–∏ {accounts[email]['username']} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}) –Ω–µ –∑–∞–ø—É—â–µ–Ω.")


async def stop_monitoring(email, category, chat_id):
    active_sessions_data = load_active_sessions()

    if email in active_sessions_data and category in active_sessions_data[email].get("categories", {}):
        if chat_id in active_sessions_data[email]["categories"][category]["chat_ids"]:
            active_sessions_data[email]["categories"][category]["chat_ids"].remove(chat_id)

            if email in active_monitoring_sessions and category in active_monitoring_sessions[email]:
                active_monitoring_sessions[email][category]["chat_ids"].remove(chat_id)

            save_active_sessions(active_sessions_data)
            await bot.send_message(chat_id, f"‚ùå –í—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–æ–¥–µ–ª–∏ {accounts[email]['username']} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}).")
        else:
            await bot.send_message(chat_id, f"‚ùå –í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É –º–æ–¥–µ–ª–∏ {accounts[email]['username']} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}).")
    else:
        await bot.send_message(chat_id, f"‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –º–æ–¥–µ–ª–∏ {accounts[email]['username']} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}) –Ω–µ –∑–∞–ø—É—â–µ–Ω.")


@asynccontextmanager
async def loading_indicator(message: types.Message, original_reply_markup: ReplyKeyboardMarkup):
    loading_markup = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")]],
        resize_keyboard=True
    )
    sent_message = await message.answer("‚è≥", reply_markup=loading_markup)

    try:
        yield

    finally:
        await bot.delete_message(chat_id=sent_message.chat.id, message_id=sent_message.message_id)
        await message.answer("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=original_reply_markup)


@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í–æ–π—Ç–∏', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–í–æ–π—Ç–∏")]],
        resize_keyboard=True
    ))


@dp.message(lambda message: message.text == "–í–æ–π—Ç–∏")
async def login_handler(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {"stage": "waiting_for_login"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:", reply_markup=types.ReplyKeyboardRemove())


@dp.message(lambda message: message.text == "–í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ (–º–æ–¥–µ–ª–∏/—Ä–∞–±–æ—Ç–Ω–∏–∫–∏)")
async def select_section(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {"stage": "selecting_section"}
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–æ–¥–µ–ª–∏")],
            [KeyboardButton(text="–†–∞–±–æ—Ç–Ω–∏–∫–∏")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ (–ê–¥–º–∏–Ω)")]
        ],
        resize_keyboard=True
    ))


@dp.message(lambda message: message.text == "–†–∞–±–æ—Ç–Ω–∏–∫–∏")
async def show_workers(message: types.Message):
    if not workers:
        await message.answer("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.", reply_markup=admin_main_menu())
        return

    workers_list = []
    for login, data in workers.items():
        password = data.get("password", "–Ω–µ —É–∫–∞–∑–∞–Ω")
        workers_list.append(f"–õ–æ–≥–∏–Ω: {login}\n–ü–∞—Ä–æ–ª—å: {password}\n")

    response = "–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤:\n\n" + "\n".join(workers_list)
    await message.answer(response, reply_markup=workers_menu())


@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞")
async def add_worker(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {"stage": "waiting_for_worker_login"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞:")


@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "waiting_for_worker_login")
async def get_worker_login(message: types.Message):
    user_id = message.from_user.id
    login = message.text

    if login in workers:
        await message.answer("‚ùå –†–∞–±–æ—Ç–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω.")
        return

    user_states[user_id]["login"] = message.text
    user_states[user_id]["stage"] = "waiting_for_worker_password"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞:")


@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥ (–ê–¥–º–∏–Ω)")
async def admin_go_back(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_states and user_states[user_id].get("is_admin", False):
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏.", reply_markup=admin_main_menu())
    else:
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=admin_main_menu())


@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥ (–†–∞–±–æ—Ç–Ω–∏–∫)")
async def worker_go_back(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_states:
        stage = user_states[user_id].get("stage", "")
        if stage == "waiting_for_worker_login":
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.", reply_markup=admin_main_menu())
        elif stage == "waiting_for_worker_password":
            user_states[user_id]["stage"] = "waiting_for_worker_login"
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞:", reply_markup=workers_back_menu())
        elif stage == "deleting_worker":
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.", reply_markup=admin_main_menu())
        else:
            user_states.pop(user_id, None)
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=admin_main_menu())
    else:
        await message.answer("–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=admin_main_menu())


@dp.message(lambda message: message.text == "–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤")
async def show_workers_list(message: types.Message):
    if not workers:
        await message.answer("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.", reply_markup=workers_menu())
        return

    workers_list = []
    for login, data in workers.items():
        password = data.get("password", "–Ω–µ —É–∫–∞–∑–∞–Ω")
        workers_list.append(f"–õ–æ–≥–∏–Ω: {login}\n–ü–∞—Ä–æ–ª—å: {password}\n")

    response = "–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤:\n\n" + "\n".join(workers_list)
    await message.answer(response, reply_markup=workers_menu())


@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "waiting_for_worker_password")
async def get_worker_password(message: types.Message):
    user_id = message.from_user.id
    login = user_states[user_id]["login"]
    password = message.text

    workers[login] = {
        "login": login,
        "password": password
    }

    save_json(WORKERS_FILE, workers)
    del user_states[user_id]
    await message.answer(f"‚úÖ –†–∞–±–æ—Ç–Ω–∏–∫ {login} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=workers_menu())


@dp.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞")
async def delete_worker(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {"stage": "deleting_worker"}
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=worker)] for worker in workers.keys()] + [
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)


@dp.message(lambda message: message.text == "–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")
async def handle_show_models(message: types.Message):
    await show_models(message)


@dp.message(lambda message: message.text == "–û—Ç–∫–ª—é—á–∏—Ç—å —Å–µ—Å—Å–∏—é")
async def stop_session_handler(message: types.Message):
    active_sessions_data = load_active_sessions()

    if not active_sessions_data:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è.", reply_markup=models_menu())
        return

    sessions_list = []
    for email, data in active_sessions_data.items():
        username = data["username"]
        for category, session_data in data["categories"].items():
            sessions_list.append(f"{username} ({category})")

    if not sessions_list:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è.", reply_markup=models_menu())
        return

    keyboard = [
        [KeyboardButton(text=f"‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å {session}")] for session in sessions_list
    ]
    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    )


@dp.message(lambda message: message.text.startswith("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å "))
async def stop_selected_session(message: types.Message):
    selected_session = message.text.replace("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å ", "").strip()

    active_sessions_data = load_active_sessions()

    for email, data in active_sessions_data.items():
        username = data["username"]
        for category, session_data in data["categories"].items():
            if f"{username} ({category})" == selected_session:
                if email in active_monitoring_sessions and category in active_monitoring_sessions[email]:
                    active_monitoring_sessions[email][category]["task"].cancel()
                    active_monitoring_sessions[email][category]["driver"].quit()
                    del active_monitoring_sessions[email][category]

                del active_sessions_data[email]["categories"][category]
                if not active_sessions_data[email]["categories"]:
                    del active_sessions_data[email]

                save_active_sessions(active_sessions_data)
                await message.answer(f"‚úÖ –°–µ—Å—Å–∏—è –¥–ª—è {selected_session} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.", reply_markup=models_menu())
                return

    await message.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=models_menu())


@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "deleting_worker")
async def confirm_delete_worker(message: types.Message):
    selected_worker = message.text
    if selected_worker in workers:
        del workers[selected_worker]
        save_json(WORKERS_FILE, workers)
        await message.answer(f"‚úÖ –†–∞–±–æ—Ç–Ω–∏–∫ {selected_worker} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=workers_menu())
    else:
        await message.answer("‚ùå –†–∞–±–æ—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=workers_menu())


@dp.message(lambda message: message.text == "–ú–æ–¥–µ–ª–∏")
async def show_models(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_states and user_states[user_id].get("is_admin", False):
        user_states[user_id]["is_admin"] = True

    active_sessions_data = load_active_sessions()

    if not accounts:
        await message.answer("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.", reply_markup=admin_main_menu())

    models_list = []
    for email, account in accounts.items():
        username = account["username"]
        categories = ["Subscribers", "VIPs", "Followers", "All"]

        category_statuses = []
        for category in categories:
            is_active = False
            if email in active_sessions_data and category in active_sessions_data[email]["categories"]:
                is_active = True
            status_icon = "üü¢" if is_active else "üî¥"
            category_statuses.append(f"{status_icon} {category}")

        models_list.append(f"üë§ {username}\n" + "\n".join(category_statuses))

    response = "–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏ –∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n\n" + "\n\n".join(models_list)
    await message.answer(response, reply_markup=models_menu())


@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "waiting_for_login")
async def get_login(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id]["login"] = message.text
    user_states[user_id]["stage"] = "waiting_for_password"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")


@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "waiting_for_password")
async def check_password(message: types.Message):
    user_id = message.from_user.id
    entered_password = message.text
    login = user_states[user_id]["login"]

    if login == config["admin_login"] and entered_password == config["admin_password"]:
        user_states[user_id]["is_admin"] = True
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É!", reply_markup=admin_main_menu())
    elif login in workers and workers[login]["password"] == entered_password:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é —Ä–∞–±–æ—Ç–Ω–∏–∫–∞!", reply_markup=main_menu())
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–í–æ–π—Ç–∏")]],
            resize_keyboard=True
        ))
    user_states.pop(user_id, None)


@dp.message(lambda message: message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_states and user_states[user_id].get("is_admin", False):
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏.", reply_markup=admin_main_menu())
    else:
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())


@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    user_id = message.from_user.id

    if user_id in user_states:
        stage = user_states[user_id].get("stage", "")

        if stage == "waiting_for_password":
            user_states[user_id]["stage"] = "waiting_for_login"
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:", reply_markup=back_menu())
        elif stage == "waiting_for_worker_login":
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.", reply_markup=workers_menu())
        elif stage == "waiting_for_worker_password":
            user_states[user_id]["stage"] = "waiting_for_worker_login"
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞:", reply_markup=back_menu())
        elif stage == "deleting_worker":
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.", reply_markup=workers_menu())
        elif stage == "selecting_section":
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏.", reply_markup=admin_main_menu())
        else:
            user_states.pop(user_id, None)
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
        return

    if user_id in active_sessions and active_sessions[user_id]:
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.", reply_markup=monitoring_menu(user_id))
        return

    await message.answer("–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=monitoring_menu())


@dp.message(lambda message: message.text == "üîô –®–∞–≥ –Ω–∞–∑–∞–¥")
async def step_back(message: types.Message):
    user_id = message.from_user.id

    if user_id in user_states:
        stage = user_states[user_id].get("stage", "")

        if stage == "waiting_for_worker_login":
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.", reply_markup=admin_main_menu())
        elif stage == "waiting_for_worker_password":
            user_states[user_id]["stage"] = "waiting_for_worker_login"
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞:", reply_markup=admin_back_menu())
        elif stage == "deleting_worker":
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.", reply_markup=admin_main_menu())
        elif stage == "selecting_section":
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏.", reply_markup=admin_main_menu())
        else:
            user_states.pop(user_id, None)
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=admin_main_menu())
        return

    if user_id in active_sessions and active_sessions[user_id]:
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.", reply_markup=monitoring_menu(user_id))
        return

    await message.answer("–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=main_menu())


@dp.message(lambda message: message.text == "üîô –®–∞–≥ –Ω–∞–∑–∞–¥")
async def step_back_in_models(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_states and user_states[user_id].get("is_admin", False):
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏.", reply_markup=admin_main_menu())
    else:
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())


@dp.message(lambda message: message.text == "üîô –®–∞–≥ –Ω–∞–∑–∞–¥" and user_states.get(message.from_user.id, {}).get("stage") == "deleting_worker")
async def step_back_in_workers(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {"stage": "selecting_section"}
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏.", reply_markup=admin_main_menu())


@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥" and user_states.get(message.from_user.id, {}).get("stage") == "monitoring")
async def step_back_in_monitoring(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {"stage": "selecting_section"}
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏.", reply_markup=admin_main_menu())


@dp.message(lambda message: message.text == "–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ")
async def start_work(message: types.Message):
    active_sessions_data = load_active_sessions()

    if not active_sessions_data:
        await message.answer("‚ö†Ô∏è –ú–æ–¥–µ–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=main_menu())
        return

    user_id = message.from_user.id
    user_states[user_id] = {"stage": "selecting_category"}

    keyboard = []
    for email, data in active_sessions_data.items():
        username = data["username"]
        categories = data["categories"]
        for category in categories:
            keyboard.append([KeyboardButton(text=f"{username} ({category})")])

    keyboard.append([KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:", reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True))


@dp.message(lambda message: message.text == "–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
async def logout(message: types.Message):
    user_id = message.from_user.id
    user_states.pop(user_id, None)
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞. –î–ª—è –≤—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í–æ–π—Ç–∏'.", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–í–æ–π—Ç–∏")]],
        resize_keyboard=True
    ))


@dp.message(lambda message: message.text == "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é")
async def start_session_from_admin(message: types.Message):
    user_id = message.from_user.id

    if not accounts:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É!", reply_markup=admin_main_menu())
        return

    user_states[user_id] = {"stage": "selecting_model_for_session", "is_admin": True}
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=account["username"])] for account in accounts.values()] + [
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏:", reply_markup=kb)


@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "selecting_category")
async def handle_category_selection(message: types.Message):
    user_id = message.from_user.id
    selected_text = message.text

    active_sessions_data = load_active_sessions()

    for email, data in active_sessions_data.items():
        username = data["username"]
        categories = data["categories"]
        for category in categories:
            if f"{username} ({category})" == selected_text:
                async with loading_indicator(message, monitoring_menu(user_id)):
                    await connect_user_to_monitoring(email, category, message.chat.id)
                if user_id in user_states:
                    del user_states[user_id]
                return

    await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu())


@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "selecting_model_for_session")
async def handle_model_selection_for_session(message: types.Message):
    user_id = message.from_user.id
    selected_username = message.text

    if selected_username not in [acc["username"] for acc in accounts.values()]:
        await message.answer("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=admin_main_menu())
        return

    email = next(email for email, acc in accounts.items() if acc["username"] == selected_username)
    password = accounts[email]["password"]
    chat_id = str(message.chat.id)

    async with loading_indicator(message, admin_main_menu()):
        twofa_needed, driver = await login_to_fansly(email, password)

    if not twofa_needed:
        await start_monitoring_for_admin(email, "All", driver, chat_id)
    else:
        user_states[user_id] = {"stage": "waiting_for_2fa", "email": email, "driver": driver, "is_admin": True}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await message.answer(f"üîê –í–≤–µ–¥–∏—Ç–µ 2FA-–∫–æ–¥ –¥–ª—è –º–æ–¥–µ–ª–∏ **{selected_username}**:", reply_markup=back_menu(), parse_mode="Markdown")


@dp.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å")
async def delete_model(message: types.Message):
    if not accounts:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.", reply_markup=models_menu())
        return

    user_id = message.from_user.id
    user_states[user_id] = {"stage": "deleting_model"}
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=account["username"])] for account in accounts.values()] + [
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)


@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "deleting_model")
async def confirm_delete_model(message: types.Message):
    selected_username = message.text
    email = next(email for email, acc in accounts.items() if acc["username"] == selected_username)

    del accounts[email]
    save_json(ACCOUNTS_FILE, accounts)

    account_folder = os.path.join("data", email)
    if os.path.exists(account_folder):
        import shutil
        shutil.rmtree(account_folder)

    await message.answer(f"‚úÖ –ú–æ–¥–µ–ª—å **{selected_username}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=models_menu())


@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å")
async def add_model(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {"stage": "waiting_for_model_email"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email –º–æ–¥–µ–ª–∏:", reply_markup=admin_back_menu())


@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "waiting_for_model_email")
async def get_model_email(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id]["email"] = message.text
    user_states[user_id]["stage"] = "waiting_for_model_password"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –º–æ–¥–µ–ª–∏:", reply_markup=admin_back_menu())


@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "waiting_for_model_password")
async def get_model_password(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id]["password"] = message.text
    user_states[user_id]["stage"] = "waiting_for_model_username"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –º–æ–¥–µ–ª–∏:", reply_markup=admin_back_menu())


@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "waiting_for_model_username")
async def get_model_username(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id]["username"] = message.text
    email = user_states[user_id]["email"]
    accounts[email] = {
        "email": email,
        "password": user_states[user_id]["password"],
        "username": user_states[user_id]["username"]
    }
    save_json(ACCOUNTS_FILE, accounts)
    del user_states[user_id]
    await message.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=models_menu())


@dp.message(lambda message: message.text == "–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ")
async def start_work(message: types.Message):
    if not accounts:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É!", reply_markup=main_menu())
        return

    user_id = message.from_user.id
    user_states[user_id] = {"stage": "selecting_model"}
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=account["username"])] for account in accounts.values()] + [
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=kb)


@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "selecting_model")
async def monitor_model(message: types.Message):
    selected_username = message.text
    email = next(email for email, acc in accounts.items() if acc["username"] == selected_username)
    chat_id = str(message.chat.id)

    await connect_user_to_monitoring(email, "All", chat_id)


@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id][
    "stage"] == "waiting_for_2fa")
async def enter_2fa(message: types.Message):
    try:
        user_id = message.from_user.id
        twofa_code = message.text
        driver = user_states[user_id]["driver"]

        async with loading_indicator(message, monitoring_section_menu()):
            logging.info(f"–ü–æ–ª—É—á–µ–Ω 2FA-–∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {twofa_code}")

            twofa_field = WebDriverWait(driver, 30).until(EC.presence_of_element_located((By.ID, "fansly_twofa")))

            # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –ø–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞
            twofa_field.clear()

            twofa_field.send_keys(twofa_code)
            twofa_field.send_keys(Keys.RETURN)

            WebDriverWait(driver, 30).until(EC.url_changes(driver.current_url))

            user_states[user_id]["stage"] = "waiting_for_monitoring_section"
            user_states[user_id]["driver"] = driver

        await message.answer("‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:", reply_markup=monitoring_section_menu())

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ 2FA: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ 2FA. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=types.ReplyKeyboardRemove())


@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "waiting_for_monitoring_section")
async def select_monitoring_section(message: types.Message):
    try:
        user_id = message.from_user.id
        email = user_states[user_id]["email"]
        driver = user_states[user_id]["driver"]
        section = message.text
        chat_id = str(message.chat.id)

        if section in ["Subscribers", "VIPs", "Followers", "All"]:
            is_already_running = False
            if user_id in active_sessions:
                for session in active_sessions[user_id]:
                    if session["email"] == email and session.get("category") == section:
                        is_already_running = True
                        break

            if is_already_running:
                await message.answer(f"‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {section} —É–∂–µ –∑–∞–ø—É—â–µ–Ω.", reply_markup=monitoring_section_menu())
                return

            if chat_id not in notifications:
                notifications[chat_id] = {}
            if email not in notifications[chat_id]:
                notifications[chat_id][email] = {}
            if section not in notifications[chat_id][email]:
                notifications[chat_id][email][section] = {"enabled": True}

            save_json(NOTIFICATIONS_FILE, notifications)
            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {section} –≤–∫–ª—é—á–µ–Ω—ã: {notifications}")

            if user_id not in active_sessions:
                active_sessions[user_id] = []
            active_sessions[user_id].append({
                "username": accounts[email]["username"],
                "email": email,
                "driver": driver,
                "category": section
            })

            active_sessions_data = load_active_sessions()

            if email not in active_sessions_data:
                active_sessions_data[email] = {
                    "username": accounts[email]["username"],
                    "categories": {
                        section: {
                            "chat_ids": []
                        }
                    }
                }
            else:
                if section not in active_sessions_data[email]["categories"]:
                    active_sessions_data[email]["categories"][section] = {
                        "chat_ids": []
                    }
                else:
                    active_sessions_data[email]["categories"][section]["chat_ids"].append()

            save_active_sessions(active_sessions_data)

            await message.answer(f"‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑–¥–µ–ª–∞ {section}...", reply_markup=models_menu())
            monitoring_active[user_id] = True
            user_drivers[user_id] = driver

            user_states.pop(user_id, None)

            task = asyncio.create_task(
                monitor_users(email, driver, message.chat.id, user_id, section))
            if email not in active_monitoring_sessions:
                active_monitoring_sessions[email] = {}
            if section not in active_monitoring_sessions[email]:
                active_monitoring_sessions[email][section] = {
                    "driver": driver,
                    "task": task,
                    "chat_ids": active_sessions_data[email]["categories"][section]["chat_ids"]
                }
        else:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é.", reply_markup=models_menu())

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–¥–µ–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@dp.message(lambda message: message.text == "–¢–µ–∫—É—â–∏–π –æ–Ω–ª–∞–π–Ω")
async def show_online_users(message: types.Message):
    user_id = message.from_user.id
    chat_id = str(message.chat.id)

    active_sessions_data = load_active_sessions()

    user_sessions = []
    for email, data in active_sessions_data.items():
        for category, session_data in data.get("categories", {}).items():
            if chat_id in session_data["chat_ids"]:
                user_sessions.append({
                    "email": email,
                    "category": category
                })

    if not user_sessions:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –Ω–∏ –∫ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.", reply_markup=monitoring_menu(user_id))
        return

    async with loading_indicator(message, monitoring_menu(user_id)):
        online_users = []
        for session in user_sessions:
            email = session["email"]
            category = session["category"]

            chat_statuses = load_chat_statuses(email, category)

            online_users.extend([
                f"üîπ {chat} ‚Äî üü¢ <b>–û–ù–õ–ê–ô–ù</b> (–ú–æ–¥–µ–ª—å: {accounts[email]['username']}, –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category})"
                for chat, user_data in chat_statuses.items() if user_data.get("is_online", False)
            ])

        if not online_users:
            await message.answer("üì≠ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –≤ —Å–µ—Ç–∏.")
            return

        header = f"üìú <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω:</b>\n"
        response = header + "\n".join(online_users)

        message_parts = split_message(response)

        for part in message_parts:
            await message.answer(part, parse_mode="HTML")


@dp.message(lambda message: message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏–∏")
async def show_active_sessions(message: types.Message):
    chat_id = str(message.chat.id)

    active_sessions_data = load_active_sessions()
    user_sessions = []

    for email, data in active_sessions_data.items():
        for category, session_data in data.get("categories", {}).items():
            if chat_id in session_data["chat_ids"]:
                user_sessions.append({
                    "email": email,
                    "username": data["username"],
                    "category": category
                })

    if not user_sessions:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.", reply_markup=main_menu())
        return

    session_list = []
    keyboard = []

    for session in user_sessions:
        email = session["email"]
        username = session["username"]
        category = session["category"]
        is_enabled = notifications.get(chat_id, {}).get(email, {}).get(category, {}).get("enabled", True)

        status = "üîî" if is_enabled else "üîï"
        session_list.append(f"{status} {username} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")

        toggle_text = f"üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {username} ({category})" if is_enabled else f"üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {username} ({category})"
        keyboard.append([KeyboardButton(text=toggle_text)])

        keyboard.append([KeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {username} ({category})")])

    keyboard.append([KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å –∫ —Å–µ—Å—Å–∏–∏")])
    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    keyboard.append([KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])

    await message.answer(
        f"–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:\n" + "\n".join(session_list),
        reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    )


@dp.message(lambda message: message.text in ["–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"])
async def toggle_all_notifications(message: types.Message):
    user_id = message.from_user.id
    chat_id = str(message.chat.id)

    if chat_id not in notifications:
        notifications[chat_id] = {}

    all_enabled = all(
        notifications[chat_id][email][category]["enabled"]
        for email in notifications[chat_id]
        for category in notifications[chat_id][email]
    )

    new_state = not all_enabled
    for email in notifications[chat_id]:
        for category in notifications[chat_id][email]:
            notifications[chat_id][email][category]["enabled"] = new_state

    save_json(NOTIFICATIONS_FILE, notifications)

    status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_state else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    await message.answer(f"–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}.", reply_markup=monitoring_menu(user_id))


@dp.message(lambda message: message.text.startswith("üîî") or message.text.startswith("üîï"))
async def toggle_notifications(message: types.Message):
    user_id = message.from_user.id
    chat_id = str(message.chat.id)

    button_text = message.text
    username = button_text.split("–¥–ª—è ")[1].split(" (")[0]
    category = button_text.split(" (")[1].rstrip(")")

    email = next(email for email, acc in accounts.items() if acc["username"] == username)

    if chat_id not in notifications:
        notifications[chat_id] = {}
    if email not in notifications[chat_id]:
        notifications[chat_id][email] = {}
    if category not in notifications[chat_id][email]:
        notifications[chat_id][email][category] = {"enabled": True}

    is_enabled = notifications[chat_id][email][category]["enabled"]
    notifications[chat_id][email][category]["enabled"] = not is_enabled
    save_json(NOTIFICATIONS_FILE, notifications)

    status = "–≤–∫–ª—é—á–µ–Ω—ã" if not is_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    await message.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ {username} ({category}) {status}.",
                         reply_markup=monitoring_menu(user_id))


@dp.message(lambda message: message.text.startswith("‚ùå –£–¥–∞–ª–∏—Ç—å "))
async def remove_session(message: types.Message):
    user_id = message.from_user.id
    chat_id = str(message.chat.id)

    button_text = message.text
    username = button_text.replace("‚ùå –£–¥–∞–ª–∏—Ç—å ", "").split(" (")[0]
    category = button_text.split(" (")[1].rstrip(")")

    email = next(email for email, acc in accounts.items() if acc["username"] == username)

    active_sessions_data = load_active_sessions()

    if email in active_sessions_data and category in active_sessions_data[email].get("categories", {}):
        if chat_id in active_sessions_data[email]["categories"][category]["chat_ids"]:
            active_sessions_data[email]["categories"][category]["chat_ids"].remove(chat_id)
            save_active_sessions(active_sessions_data)

            if email in active_monitoring_sessions and category in active_monitoring_sessions[email]:
                if chat_id in active_monitoring_sessions[email][category]["chat_ids"]:
                    active_monitoring_sessions[email][category]["chat_ids"].remove(chat_id)

            await message.answer(f"‚ùå –í—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–æ–¥–µ–ª–∏ {username} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}).",
                                 reply_markup=monitoring_menu(user_id))
        else:
            await message.answer(f"‚ùå –í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É –º–æ–¥–µ–ª–∏ {username} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}).",
                                 reply_markup=monitoring_menu(user_id))
    else:
        await message.answer(f"‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –º–æ–¥–µ–ª–∏ {username} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}) –Ω–µ –∑–∞–ø—É—â–µ–Ω.",
                             reply_markup=monitoring_menu(user_id))


async def disconnect_user_from_monitoring(email, category, chat_id):
    active_sessions_data = load_active_sessions()

    if email in active_sessions_data and category in active_sessions_data[email].get("categories", {}):
        chat_id_str = str(chat_id)
        if chat_id_str in active_sessions_data[email]["categories"][category]["chat_ids"]:
            active_sessions_data[email]["categories"][category]["chat_ids"].remove(chat_id_str)
            save_active_sessions(active_sessions_data)

            if email in active_monitoring_sessions and category in active_monitoring_sessions[email]:
                if chat_id_str in active_monitoring_sessions[email][category]["chat_ids"]:
                    active_monitoring_sessions[email][category]["chat_ids"].remove(chat_id_str)

            await bot.send_message(chat_id, f"‚ùå –í—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–æ–¥–µ–ª–∏ {accounts[email]['username']} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}).")
        else:
            await bot.send_message(chat_id, f"‚ùå –í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É –º–æ–¥–µ–ª–∏ {accounts[email]['username']} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}).")
    else:
        await bot.send_message(chat_id, f"‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –º–æ–¥–µ–ª–∏ {accounts[email]['username']} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}) –Ω–µ –∑–∞–ø—É—â–µ–Ω.")


@dp.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å –∫ —Å–µ—Å—Å–∏–∏")
async def add_model_to_session(message: types.Message):
    user_id = message.from_user.id
    chat_id = str(message.chat.id)

    active_sessions_data = load_active_sessions()

    if not active_sessions_data:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.", reply_markup=monitoring_menu(user_id))
        return

    available_models = []
    for email, data in active_sessions_data.items():
        username = data["username"]
        for category in data["categories"]:
            if chat_id not in data["categories"][category]["chat_ids"]:
                available_models.append(f"{username} ({category})")

    if not available_models:
        await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫–æ –≤—Å–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–º –º–æ–¥–µ–ª—è–º.", reply_markup=monitoring_menu(user_id))
        return

    keyboard = [[KeyboardButton(text=model)] for model in available_models]
    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])

    await message.answer(
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    )


@dp.message(lambda message: message.text.endswith(")"))
async def handle_model_selection_for_connection(message: types.Message):
    chat_id = str(message.chat.id)

    selected_text = message.text
    username = selected_text.split(" (")[0]
    category = selected_text.split(" (")[1].rstrip(")")

    email = next(email for email, acc in accounts.items() if acc["username"] == username)

    await connect_user_to_monitoring(email, category, chat_id)


@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "adding_model_to_session")
async def handle_add_model_to_session(message: types.Message):
    user_id = message.from_user.id
    selected_username = message.text

    if selected_username not in [acc["username"] for acc in accounts.values()]:
        await message.answer("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=monitoring_menu(user_id))
        return

    email = next(email for email, acc in accounts.items() if acc["username"] == selected_username)
    chat_id = str(message.chat.id)

    if email in active_monitoring_sessions:
        for category in active_monitoring_sessions[email]:
            if chat_id not in active_monitoring_sessions[email][category]["chat_ids"]:
                active_monitoring_sessions[email][category]["chat_ids"].append(chat_id)
                await bot.send_message(chat_id, f"‚úÖ –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É –º–æ–¥–µ–ª–∏ {selected_username} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}).", reply_markup=monitoring_menu(user_id))
    else:
        await bot.send_message(chat_id, f"‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –º–æ–¥–µ–ª–∏ {selected_username} –Ω–µ –∑–∞–ø—É—â–µ–Ω.", reply_markup=monitoring_menu(user_id))


async def login_to_fansly(username, password):
    options = ChromiumOptions()
    options.add_argument("--headless")
    options.add_argument("--disable-gpu")
    options.add_argument("--window-size=1920x1080")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--log-level=3")
    driver = webdriver.Chromium(
        service=ChromiumService('/usr/bin/chromium-browser'),
        options=options
    )

    try:
        driver.get("https://fansly.com/")
        driver.set_window_size(1200, 800)
        logging.info("–û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Fansly.")

        try:
            await asyncio.sleep(5)
            modal_content = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "div.modal-content"))
            )
            logging.info("–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –Ω–∞–π–¥–µ–Ω–æ.")

            enter_button = modal_content.find_element(By.CSS_SELECTOR, "div.btn.large.solid-green.flex-1")
            enter_button.click()
            logging.info("–ö–Ω–æ–ø–∫–∞ 'Enter' –Ω–∞–∂–∞—Ç–∞.")
            await asyncio.sleep(2)
        except Exception as e:
            logging.info("–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ 'Enter' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", e)

        try:
            await asyncio.sleep(5)
            login_button = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.XPATH, "//div[contains(@class, 'btn solid-blue')][2]"))
            )
            login_button.click()
            print("–ö–Ω–æ–ø–∫–∞ Login –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞–∂–∞—Ç–∞!")

        except Exception as e:
            print("–û—à–∏–±–∫–∞: –ö–Ω–æ–ø–∫–∞ Login –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", e)

        username_field = WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.ID, "fansly_login"))
        )
        username_field.send_keys(username)
        logging.info("–í–≤–µ–¥–µ–Ω username/email.")

        password_field = WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.ID, "fansly_password"))
        )
        password_field.send_keys(password)
        logging.info("–í–≤–µ–¥–µ–Ω –ø–∞—Ä–æ–ª—å.")

        password_field.send_keys(Keys.RETURN)
        logging.info("–§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

        await asyncio.sleep(5)

        if "twofa" in driver.page_source:
            logging.info("–¢—Ä–µ–±—É–µ—Ç—Å—è 2FA.")
            return True, driver

        logging.info("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
        return False, driver

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ Fansly: {e}")
        driver.quit()
        raise


async def get_chat_statuses(driver, email, category):
    driver.get("https://fansly.com/messages")
    await asyncio.sleep(5)
    driver.set_window_size(1200, 800)

    try:
        modal = driver.find_element(By.CLASS_NAME, "xdModal")
        driver.execute_script("arguments[0].remove();", modal)
        logging.info("–í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ!")
        await asyncio.sleep(5)
    except NoSuchElementException:
        logging.info("–í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

    try:
        category_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable(
                (By.XPATH, f"//div[contains(@class, 'bubble')]/xd-localization-string[contains(text(), '{category}')]"))
        )
        category_button.click()
        await asyncio.sleep(5)
    except Exception as e:
        logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '{category}': {e}")
        return {}, {}

    try:
        chat_container = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CLASS_NAME, "message-list"))
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω! {e}")
        return {}, {}

    all_chat_statuses = {}
    unique_users = set()
    scroll_step = 1000
    max_attempts = 40
    attempt = 0

    users = driver.find_elements(By.CLASS_NAME, "message")
    for user in users:
        try:
            username = user.find_element(By.CLASS_NAME, "display-name").text

            user_link_element = user.find_element(By.CLASS_NAME, "username-wrapper")
            user_link = user_link_element.get_attribute("href")

            user_username = user_link.split("/")[-1]
            if user_username.startswith("@"):
                user_username = user_username[1:]

            if username not in unique_users:
                unique_users.add(username)
                online_indicator = user.find_elements(By.CLASS_NAME, "online-indicator")

                is_online = False
                if online_indicator:
                    status_classes = online_indicator[0].get_attribute("class")
                    is_online = "available" in status_classes or "away" in status_classes

                all_chat_statuses[username] = {
                    "is_online": is_online,
                    "username": user_username
                }
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            continue

    save_to_json(all_chat_statuses, email, category, filename=f"chat_statuses_page_initial.json")
    logging.info(
        f"üìÇ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª chat_statuses_page_initial.json –¥–ª—è {accounts[email]['username']} {category}")

    # –ó–∞—Ç–µ–º –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∏ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    while attempt < max_attempts:
        logging.info(f"üîÑ –®–∞–≥ {attempt + 1}: –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è {accounts[email]['username']} {category}...")
        driver.execute_script(f"arguments[0].scrollTop += {scroll_step};", chat_container)
        await asyncio.sleep(5)

        users = driver.find_elements(By.CLASS_NAME, "message")

        for user in users:
            try:
                username = user.find_element(By.CLASS_NAME, "display-name").text

                user_link_element = user.find_element(By.CLASS_NAME, "username-wrapper")
                user_link = user_link_element.get_attribute("href")

                user_username = user_link.split("/")[-1]
                if user_username.startswith("@"):
                    user_username = user_username[1:]

                if username not in unique_users:
                    unique_users.add(username)
                    online_indicator = user.find_elements(By.CLASS_NAME, "online-indicator")

                    is_online = False
                    if online_indicator:
                        status_classes = online_indicator[0].get_attribute("class")
                        is_online = "available" in status_classes or "away" in status_classes

                    all_chat_statuses[username] = {
                        "is_online": is_online,
                        "username": user_username
                    }
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                continue

        save_to_json(all_chat_statuses, email, category, filename=f"chat_statuses_page_{attempt + 1}.json")
        logging.info(f"üìÇ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª chat_statuses_page_{attempt + 1}.json –¥–ª—è {accounts[email]['username']} {category}")

        new_height = driver.execute_script("return arguments[0].scrollHeight;", chat_container)
        current_height = driver.execute_script("return arguments[0].scrollTop;", chat_container)
        if current_height + chat_container.size["height"] >= new_height:
            logging.info(f"üìè –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            break

        attempt += 1

    merge_json_files(email, category, output_filename="all_chat_statuses.json")
    logging.info(f"‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª all_chat_statuses.json")

    return list(unique_users), all_chat_statuses


async def monitor_users(email, driver, chat_id, user_id, category):
    global prev_statuses

    static_users_file = os.path.join("data", email, category.lower(), "static_users.json")
    if not os.path.exists(static_users_file):
        static_users, _ = await get_chat_statuses(driver, email, category)
        save_json("static_users.json", static_users, email, category)
    else:
        static_users = load_json("static_users.json", email, category)

    prev_statuses = load_json(STATUS_FILE, email, category)
    is_first_run = True

    asyncio.create_task(update_user_list_periodically(email, category))

    while monitoring_active.get(user_id, False):
        try:
            if is_first_run:
                username = accounts[email]["username"]
                await bot.send_message(
                    chat_id,
                    f"‚úÖ –ú–æ–¥–µ–ª—å **{username}** (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}) –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!",
                    parse_mode="Markdown"
                )
                is_first_run = False

            logging.info(f"üöÄ –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è {email} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")

            _, chat_statuses = await get_chat_statuses(driver, email, category)
            filtered_statuses = {user: chat_statuses[user] for user in static_users if user in chat_statuses}

            if filtered_statuses:
                logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(filtered_statuses)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è {email} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}).")
                await check_status_updates(email, filtered_statuses, category)
                prev_statuses = filtered_statuses
                save_json(STATUS_FILE, prev_statuses, email, category)

            logging.info(f"üèÅ –ò—Ç–µ—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {email} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")

            await asyncio.sleep(10)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ {email}: {e}")
            await asyncio.sleep(10)


async def check_status_updates(email, new_statuses, category):
    global prev_statuses

    if email not in active_monitoring_sessions or category not in active_monitoring_sessions[email]:
        logging.warning(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –º–æ–¥–µ–ª–∏ {email} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}) –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
        return

    chat_ids = active_monitoring_sessions[email][category]["chat_ids"]

    prev_statuses = load_json(STATUS_FILE, email, category)

    if not prev_statuses:
        logging.warning(f"–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {email} {category}. –≠—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è.")
        save_json(STATUS_FILE, new_statuses, email, category)
        return

    for user, user_data in new_statuses.items():
        if "is_online" not in user_data or "username" not in user_data:
            logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {user_data}")
            continue

        was_online = prev_statuses.get(user, {}).get("is_online", False)
        is_online = user_data["is_online"]
        username = user_data["username"]

        if not was_online and is_online:
            notification_text = (
                f"üîî {user} —Ç–µ–ø–µ—Ä—å –æ–Ω–ª–∞–π–Ω!\n"
                f"–ú–æ–¥–µ–ª—å: {accounts[email]['username']}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"
            )

            user_link = f"https://fansly.com/{username}/posts"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...", url=user_link)]
            ])

            for chat_id in chat_ids:
                if chat_id in notifications and email in notifications[chat_id] and category in notifications[chat_id][email] and notifications[chat_id][email][category]["enabled"]:
                    try:
                        await bot.send_message(chat_id, notification_text, reply_markup=keyboard)
                        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –≤ —á–∞—Ç {chat_id}")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")

    save_json(STATUS_FILE, new_statuses, email, category)


async def update_user_list_periodically(email, category, interval=7200):
    while True:
        await asyncio.sleep(interval)
        logging.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è {email} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category})...")

        try:
            static_users = load_json("static_users.json", email, category)

            current_statuses = load_json(STATUS_FILE, email, category)

            all_chat_statuses = load_json("all_chat_statuses.json", email, category)

            new_users = [user for user in all_chat_statuses if user not in static_users]

            if new_users:
                logging.info(f"üÜï –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {new_users}")
                static_users.extend(new_users)
                save_json("static_users.json", static_users, email, category)

                for user in new_users:
                    if user in all_chat_statuses:
                        current_statuses[user] = all_chat_statuses[user]

                save_json(STATUS_FILE, current_statuses, email, category)
                logging.info(f"‚úÖ –°—Ç–∞—Ç—É—Å—ã –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
            else:
                logging.info(f"üÜó –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")


async def main():
    asyncio.create_task(restore_monitoring_sessions())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
