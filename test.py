import os
import asyncio
import logging
import json
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

logging.basicConfig(level=logging.INFO)

TOKEN = "7745376176:AAH0q7LS3k_PCB9ZzWlxYyY9fS5eFPMAxMc"
ACCOUNTS_FILE = "accounts.json"
STATUS_FILE = "status.json"
NOTIFICATIONS_FILE = "notifications.json"

if not os.path.exists("data"):
    os.makedirs("data")


def ensure_account_folder(email, category=None):
    account_folder = os.path.join("data", email)
    if not os.path.exists(account_folder):
        os.makedirs(account_folder)

    if category:
        category_folder = os.path.join(account_folder, category.lower())
        if not os.path.exists(category_folder):
            os.makedirs(category_folder)
        return category_folder

    return account_folder


def load_chat_statuses(email, category=None):
    if category:
        account_folder = ensure_account_folder(email, category)
    else:
        account_folder = ensure_account_folder(email)

    all_statuses = {}

    for filename in os.listdir(account_folder):
        if filename.startswith("chat_statuses_page_") and filename.endswith(".json"):
            filepath = os.path.join(account_folder, filename)
            try:
                with open(filepath, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    all_statuses.update(data)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {filename}: {e}")

    return all_statuses


def load_json(filename, email=None, category=None):
    if email:
        if category:
            account_folder = ensure_account_folder(email, category)
        else:
            account_folder = ensure_account_folder(email)
        filepath = os.path.join(account_folder, filename)
    else:
        filepath = os.path.join("data", filename)

    try:
        with open(filepath, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}


def save_json(filename, data, email=None, category=None):
    if email:
        if category:
            account_folder = ensure_account_folder(email, category)
        else:
            account_folder = ensure_account_folder(email)
        filepath = os.path.join(account_folder, filename)
    else:
        filepath = os.path.join("data", filename)

    with open(filepath, "w") as f:
        json.dump(data, f, indent=4)


def save_to_json(data, email, category, filename="chat_statuses.json"):
    category_folder = ensure_account_folder(email, category)
    filepath = os.path.join(category_folder, filename)
    with open(filepath, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)


def split_message(text, max_length=4096):
    return [text[i:i + max_length] for i in range(0, len(text), max_length)]


def merge_json_files(email, category, output_filename="all_chat_statuses.json"):
    category_folder = ensure_account_folder(email, category)
    all_data = {}

    for filename in os.listdir(category_folder):
        if filename.startswith("chat_statuses_page_") and filename.endswith(".json"):
            filepath = os.path.join(category_folder, filename)
            with open(filepath, "r", encoding="utf-8") as f:
                data = json.load(f)
                all_data.update(data)

    output_filepath = os.path.join(category_folder, output_filename)
    with open(output_filepath, "w", encoding="utf-8") as f:
        json.dump(all_data, f, indent=4, ensure_ascii=False)


bot = Bot(token=TOKEN)
dp = Dispatcher()
accounts = load_json(ACCOUNTS_FILE)
prev_statuses = load_json(STATUS_FILE)
notifications = load_json(NOTIFICATIONS_FILE)
user_states = {}
monitoring_active = {}
user_drivers = {}
active_sessions = {}


def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å")],
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å")],
        ],
        resize_keyboard=True
    )


def monitoring_menu(user_id=None):
    keyboard = [
        [KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏–∏")],
        [KeyboardButton(text="–¢–µ–∫—É—â–∏–π –æ–Ω–ª–∞–π–Ω")],
        [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]

    if user_id and user_id in active_sessions and active_sessions[user_id]:
        keyboard.insert(0, [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å –∫ —Å–µ—Å—Å–∏–∏")])

    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def back_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
        ],
        resize_keyboard=True
    )


def monitoring_section_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="Subscribers")],
            [KeyboardButton(text="VIPs")],
            [KeyboardButton(text="Followers")],
            [KeyboardButton(text="All")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )


@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())


@dp.message(lambda message: message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main(message: types.Message):
    user_id = message.from_user.id
    user_states.pop(user_id, None)
    monitoring_active[user_id] = False

    if user_id in user_drivers:
        driver = user_drivers[user_id]
        try:
            driver.quit()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
        del user_drivers[user_id]

    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())


@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å")
async def add_model(message: types.Message):
    user_states[message.from_user.id] = {"stage": "waiting_for_email"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email –º–æ–¥–µ–ª–∏:", reply_markup=back_menu())


@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    user_id = message.from_user.id

    if user_id in user_states:
        stage = user_states[user_id]["stage"]

        if stage == "waiting_for_password":
            user_states[user_id]["stage"] = "waiting_for_email"
            await message.answer("–í–≤–µ–¥–∏—Ç–µ email –º–æ–¥–µ–ª–∏:", reply_markup=back_menu())
        else:
            user_states.pop(user_id)
            await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
        return

    if user_id in active_sessions and active_sessions[user_id]:
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.", reply_markup=monitoring_menu(user_id))
        return

    await message.answer("–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=main_menu())


@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "waiting_for_email")
async def get_email(message: types.Message):
    user_states[message.from_user.id]["email"] = message.text
    user_states[message.from_user.id]["stage"] = "waiting_for_password"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –º–æ–¥–µ–ª–∏:", reply_markup=back_menu())


@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "waiting_for_password")
async def get_password(message: types.Message):
    user_states[message.from_user.id]["password"] = message.text
    user_states[message.from_user.id]["stage"] = "waiting_for_username"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –º–æ–¥–µ–ª–∏:", reply_markup=back_menu())


@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "waiting_for_username")
async def get_username(message: types.Message):
    user_states[message.from_user.id]["username"] = message.text
    email = user_states[message.from_user.id]["email"]
    accounts[email] = {
        "email": email,
        "password": user_states[message.from_user.id]["password"],
        "username": user_states[message.from_user.id]["username"]
    }
    save_json(ACCOUNTS_FILE, accounts)
    del user_states[message.from_user.id]
    await message.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_menu())


@dp.message(lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å")
async def select_model(message: types.Message):
    if not accounts:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É!", reply_markup=main_menu())
        return

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=account["username"])] for account in accounts.values()] + [
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=kb)


@dp.message(lambda message: message.text in [acc["username"] for acc in accounts.values()])
async def monitor_model(message: types.Message):
    selected_username = message.text
    email = next(email for email, acc in accounts.items() if acc["username"] == selected_username)
    password = accounts[email]["password"]
    chat_id = str(message.chat.id)

    if chat_id not in notifications:
        notifications[chat_id] = {}
    if email not in notifications[chat_id]:
        notifications[chat_id][email] = {}

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "All" –≤–∫–ª—é—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    notifications[chat_id][email]["All"] = {"enabled": True}
    save_json(NOTIFICATIONS_FILE, notifications)
    logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {notifications}")

    await message.answer(f"‚è≥ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ **{selected_username}**...", reply_markup=main_menu())

    twofa_needed, driver = await login_to_fansly(email, password, message.chat.id)

    if not twofa_needed:
        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...", reply_markup=monitoring_menu(message.from_user.id))
        monitoring_active[message.from_user.id] = True
        user_drivers[message.from_user.id] = driver

        if message.from_user.id not in active_sessions:
            active_sessions[message.from_user.id] = []
        active_sessions[message.from_user.id].append({
            "username": selected_username,
            "email": email,
            "driver": driver,
            "category": "All"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏—è "All"
        })

        asyncio.create_task(monitor_users(email, driver, message.chat.id, message.from_user.id, "All"))
    else:
        user_states[message.from_user.id] = {"stage": "waiting_for_2fa", "email": email, "driver": driver}
        await message.answer(f"üîê –í–≤–µ–¥–∏—Ç–µ 2FA-–∫–æ–¥ –¥–ª—è –º–æ–¥–µ–ª–∏ **{accounts[email]['username']}**:", reply_markup=back_menu(), parse_mode="Markdown")


@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "waiting_for_2fa")
async def enter_2fa(message: types.Message):
    try:
        user_id = message.from_user.id
        email = user_states[user_id]["email"]
        twofa_code = message.text
        driver = user_states[user_id]["driver"]

        logging.info(f"–ü–æ–ª—É—á–µ–Ω 2FA-–∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {twofa_code}")
        await message.answer("üîë –í–≤–æ–¥–∏–º 2FA-–∫–æ–¥...")

        twofa_field = WebDriverWait(driver, 30).until(EC.presence_of_element_located((By.ID, "fansly_twofa")))
        twofa_field.send_keys(twofa_code)
        twofa_field.send_keys(Keys.RETURN)

        WebDriverWait(driver, 30).until(EC.url_changes(driver.current_url))

        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:", reply_markup=monitoring_section_menu())

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id]["stage"] = "waiting_for_monitoring_section"
        user_states[user_id]["driver"] = driver

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ 2FA: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ 2FA. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@dp.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "waiting_for_monitoring_section")
async def select_monitoring_section(message: types.Message):
    try:
        user_id = message.from_user.id
        email = user_states[user_id]["email"]
        driver = user_states[user_id]["driver"]
        section = message.text

        if section in ["Subscribers", "VIPs", "Followers", "All"]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            is_already_running = False
            if user_id in active_sessions:
                for session in active_sessions[user_id]:
                    if session["email"] == email and session.get("category") == section:
                        is_already_running = True
                        break

            if is_already_running:
                await message.answer(f"‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {section} —É–∂–µ –∑–∞–ø—É—â–µ–Ω.", reply_markup=monitoring_section_menu())
                return

            if user_id not in active_sessions:
                active_sessions[user_id] = []
            active_sessions[user_id].append({
                "username": accounts[email]["username"],
                "email": email,
                "driver": driver,
                "category": section
            })

            await message.answer(f"‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑–¥–µ–ª–∞ {section}...", reply_markup=monitoring_menu(user_id))
            monitoring_active[user_id] = True
            user_drivers[user_id] = driver

            user_states.pop(user_id, None)

            asyncio.create_task(monitor_users(email, driver, message.chat.id, user_id, section))
        else:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é.", reply_markup=monitoring_section_menu())

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–¥–µ–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@dp.message(lambda message: message.text == "–¢–µ–∫—É—â–∏–π –æ–Ω–ª–∞–π–Ω")
async def show_online_users(message: types.Message):
    user_id = message.from_user.id
    if user_id not in active_sessions or not active_sessions[user_id]:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π!")
        return

    online_users = []
    for session in active_sessions[user_id]:
        email = session["email"]
        category = session.get("category", "All")
        chat_statuses = load_chat_statuses(email, category)
        if not chat_statuses:
            await message.answer("üì• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
            return

        online_users.extend([
            f"üîπ {chat} ‚Äî üü¢ <b>–û–ù–õ–ê–ô–ù</b> (–ú–æ–¥–µ–ª—å: {accounts[email]['username']}, –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category})"
            for chat, user_data in chat_statuses.items() if user_data.get("is_online", False)
        ])

    if not online_users:
        await message.answer("üì≠ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –≤ —Å–µ—Ç–∏.")
        return

    header = f"üìú <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω:</b>\n"
    response = header + "\n".join(online_users)

    message_parts = split_message(response)

    for part in message_parts:
        await message.answer(part, parse_mode="HTML")


@dp.message(lambda message: message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏–∏")
async def show_active_sessions(message: types.Message):
    user_id = message.from_user.id
    chat_id = str(message.chat.id)

    if user_id not in active_sessions or not active_sessions[user_id]:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.", reply_markup=main_menu())
        return

    sessions = active_sessions[user_id]
    session_list = []

    for session in sessions:
        email = session["email"]
        username = session["username"]
        category = session.get("category", "All")
        is_enabled = notifications.get(chat_id, {}).get(email, {}).get(category, {}).get("enabled", True)

        status = "üîî" if is_enabled else "üîï"
        session_list.append(f"{status} {username} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")

    keyboard = []
    for session in sessions:
        email = session["email"]
        username = session["username"]
        category = session.get("category", "All")
        is_enabled = notifications.get(chat_id, {}).get(email, {}).get(category, {}).get("enabled", True)

        toggle_text = f"üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {username} ({category})" if is_enabled else f"üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {username} ({category})"
        keyboard.append([KeyboardButton(text=toggle_text)])

        keyboard.append([KeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {username} ({category})")])

    keyboard.append([KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å –∫ —Å–µ—Å—Å–∏–∏")])
    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    keyboard.append([KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])

    await message.answer(
        f"–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:\n" + "\n".join(session_list),
        reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    )


@dp.message(lambda message: message.text.startswith("üîî") or message.text.startswith("üîï"))
async def toggle_notifications(message: types.Message):
    user_id = message.from_user.id
    chat_id = str(message.chat.id)

    if user_id not in active_sessions or not active_sessions[user_id]:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.", reply_markup=main_menu())
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    button_text = message.text
    username = button_text.split("–¥–ª—è ")[1].split(" (")[0]
    category = button_text.split(" (")[1].rstrip(")")

    session_to_toggle = None
    for session in active_sessions[user_id]:
        if session["username"] == username and session.get("category") == category:
            session_to_toggle = session
            break

    if not session_to_toggle:
        await message.answer(f"–°–µ—Å—Å–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ {username} ({category}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=monitoring_menu(user_id))
        return

    email = session_to_toggle["email"]

    if chat_id not in notifications:
        notifications[chat_id] = {}

    if email not in notifications[chat_id]:
        notifications[chat_id][email] = {}

    if category not in notifications[chat_id][email]:
        notifications[chat_id][email][category] = {"enabled": True}

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    is_enabled = notifications[chat_id][email][category]["enabled"]
    notifications[chat_id][email][category]["enabled"] = not is_enabled
    save_json(NOTIFICATIONS_FILE, notifications)

    status = "–≤–∫–ª—é—á–µ–Ω—ã" if not is_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    await message.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ {username} ({category}) {status}.", reply_markup=monitoring_menu(user_id))


@dp.message(lambda message: message.text.startswith("‚ùå –£–¥–∞–ª–∏—Ç—å "))
async def remove_session(message: types.Message):
    user_id = message.from_user.id
    if user_id not in active_sessions or not active_sessions[user_id]:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.", reply_markup=main_menu())
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    button_text = message.text
    username = button_text.replace("‚ùå –£–¥–∞–ª–∏—Ç—å ", "").split(" (")[0]
    category = button_text.split(" (")[1].rstrip(")")

    sessions = active_sessions[user_id]
    for session in sessions:
        if session["username"] == username and session.get("category") == category:
            if "driver" in session:
                try:
                    session["driver"].quit()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")

            sessions.remove(session)
            await message.answer(f"–°–µ—Å—Å–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ {username} ({category}) —É–¥–∞–ª–µ–Ω–∞.", reply_markup=monitoring_menu(user_id))
            return

    await message.answer(f"–°–µ—Å—Å–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ {username} ({category}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=monitoring_menu(user_id))


@dp.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å –∫ —Å–µ—Å—Å–∏–∏")
async def add_model_to_session(message: types.Message):
    user_id = message.from_user.id

    if not accounts:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É!", reply_markup=main_menu())
        return

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=account["username"])] for account in accounts.values()] + [
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é:", reply_markup=kb)


async def login_to_fansly(username, password, chat_id):
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--disable-gpu")
    options.add_argument("--window-size=1920x1080")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--log-level=3")
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

    driver.get("https://fansly.com/")

    username_field = WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.NAME, "username")))
    password_field = driver.find_element(By.NAME, "password")
    username_field.send_keys(username)
    password_field.send_keys(password)
    password_field.send_keys(Keys.RETURN)

    await asyncio.sleep(5)

    if "twofa" in driver.page_source:
        return True, driver

    return False, driver


async def get_chat_statuses(driver, chat_id, email, category):
    driver.get("https://fansly.com/messages")
    await asyncio.sleep(5)

    try:
        modal = driver.find_element(By.CLASS_NAME, "xdModal")
        driver.execute_script("arguments[0].remove();", modal)
        logging.info("–í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ!")
        await asyncio.sleep(2)
    except:
        logging.info("–í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

    try:
        category_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable(
                (By.XPATH, f"//div[contains(@class, 'bubble')]/xd-localization-string[contains(text(), '{category}')]"))
        )
        category_button.click()
        await asyncio.sleep(5)
    except Exception as e:
        logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '{category}': {e}")

    try:
        chat_container = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CLASS_NAME, "message-list"))
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω! {e}")
        return {}

    all_chat_statuses = {}
    unique_users = set()
    scroll_step = 1000
    max_attempts = 40
    attempt = 0

    while attempt < max_attempts:
        driver.execute_script(f"arguments[0].scrollTop += {scroll_step};", chat_container)
        await asyncio.sleep(5)

        users = driver.find_elements(By.CLASS_NAME, "message")

        for user in users:
            try:
                username = user.find_element(By.CLASS_NAME, "display-name").text

                user_link_element = user.find_element(By.CLASS_NAME, "username-wrapper")
                user_link = user_link_element.get_attribute("href")

                user_username = user_link.split("/")[-1]
                if user_username.startswith("@"):
                    user_username = user_username[1:]

                if username not in unique_users:
                    unique_users.add(username)
                    online_indicator = user.find_elements(By.CLASS_NAME, "online-indicator")

                    is_online = False
                    if online_indicator:
                        status_classes = online_indicator[0].get_attribute("class")
                        is_online = "available" in status_classes or "away" in status_classes

                    all_chat_statuses[username] = {
                        "is_online": is_online,
                        "username": user_username
                    }
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                continue

        save_to_json(all_chat_statuses, email, category, filename=f"chat_statuses_page_{attempt + 1}.json")
        logging.info(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {email} –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –æ–±–Ω–æ–≤–ª–µ–Ω.")
        new_height = driver.execute_script("return arguments[0].scrollHeight;", chat_container)
        current_height = driver.execute_script("return arguments[0].scrollTop;", chat_container)
        if current_height + chat_container.size["height"] >= new_height:
            break

        attempt += 1

    merge_json_files(email, category, output_filename="all_chat_statuses.json")

    return all_chat_statuses


async def monitor_users(email, driver, chat_id, user_id, category):
    global prev_statuses

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    prev_statuses = load_json(STATUS_FILE, email, category)

    while monitoring_active.get(user_id, False):
        try:
            chat_statuses = await get_chat_statuses(driver, chat_id, email, category)
            if chat_statuses:
                await check_status_updates(email, chat_statuses, chat_id, category)
                prev_statuses = chat_statuses
                save_json(STATUS_FILE, prev_statuses, email, category)

            await asyncio.sleep(10)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ {email}: {e}")
            await asyncio.sleep(10)


async def check_status_updates(email, new_statuses, chat_id, category):
    global prev_statuses

    chat_id = str(chat_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (chat_id not in notifications or
        email not in notifications[chat_id] or
        category not in notifications[chat_id][email] or
        not notifications[chat_id][email][category]["enabled"]):
        logging.warning(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    prev_statuses = load_json(STATUS_FILE, email, category)

    if not prev_statuses:
        logging.warning(f"–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}. –≠—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è.")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ
        save_json(STATUS_FILE, new_statuses, email, category)
        return

    for user, user_data in new_statuses.items():
        if "is_online" not in user_data or "username" not in user_data:
            logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {user_data}")
            continue

        was_online = prev_statuses.get(user, {}).get("is_online", False)
        is_online = user_data["is_online"]
        username = user_data["username"]

        if not was_online and is_online:
            notification_text = (
                f"üîî {user} —Ç–µ–ø–µ—Ä—å –æ–Ω–ª–∞–π–Ω!\n"
                f"–ú–æ–¥–µ–ª—å: {accounts[email]['username']}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"
            )

            user_link = f"https://fansly.com/{username}/posts"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...", url=user_link)]
            ])

            try:
                await bot.send_message(chat_id, notification_text, reply_markup=keyboard)
                logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    save_json(STATUS_FILE, new_statuses, email, category)

async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())