# handlers/worker_handlers.py

from aiogram import Router, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from utils.keyboard_utils import worker_main_menu, sessions_editor_menu, back_menu
from utils.file_utils import load_json, save_json
from utils.monitoring_utils import login_to_fansly
import os

router = Router()

# –î–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
WORKERS_FILE = "data/workers.json"
workers = load_json(WORKERS_FILE)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
@router.message(lambda message: message.text == "–†–µ–¥–∞–∫—Ç–æ—Ä —Å–µ—Å—Å–∏–π")
async def sessions_editor(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=sessions_editor_menu())

@router.message(lambda message: message.text == "–°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π")
async def show_sessions_list(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states or "worker_login" not in user_states[user_id]:
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    worker_login = user_states[user_id]["worker_login"]
    sessions = workers[worker_login]["sessions"]

    if not sessions:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
        return

    sessions_list = "\n".join([f"üîπ {session['username']} ({session['email']})" for session in sessions])
    await message.answer(f"üìú –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π:\n{sessions_list}")

@router.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å –≤ —Å–µ—Å—Å–∏—é")
async def add_model_to_session(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states or "worker_login" not in user_states[user_id]:
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    if not accounts:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.")
        return

    user_states[user_id] = {"stage": "adding_model_to_session"}
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=acc["username"])] for acc in accounts.values()] + [
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é:", reply_markup=kb)

@router.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "adding_model_to_session")
async def handle_add_model_to_session(message: types.Message):
    user_id = message.from_user.id
    selected_username = message.text

    if selected_username not in [acc["username"] for acc in accounts.values()]:
        await message.answer("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=sessions_editor_menu())
        return

    email = next(email for email, acc in accounts.items() if acc["username"] == selected_username)
    worker_login = user_states[user_id]["worker_login"]

    workers[worker_login]["sessions"].append({
        "username": selected_username,
        "email": email,
        "notifications_enabled": True
    })
    save_json(WORKERS_FILE, workers)

    await message.answer(f"‚úÖ –ú–æ–¥–µ–ª—å **{selected_username}** –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏—é!", reply_markup=sessions_editor_menu())
    user_states.pop(user_id, None)