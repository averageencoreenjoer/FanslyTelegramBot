# handlers/admin_handlers.py

from aiogram import Router, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from utils.keyboard_utils import admin_main_menu, models_editor_menu, workers_editor_menu, back_menu
from utils.file_utils import load_json, save_json
import os

router = Router()

# –î–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–µ–π
ACCOUNTS_FILE = "accounts.json"
accounts = load_json(ACCOUNTS_FILE)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥" –≤ –∞–¥–º–∏–Ω–∫–µ
@router.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def go_back_in_admin(message: types.Message):
    user_id = message.from_user.id

    if user_id not in user_states:
        await message.answer("–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=admin_main_menu())
        return

    stage = user_states[user_id].get("stage")

    if stage == "adding_model":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–ª –º–æ–¥–µ–ª—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π.", reply_markup=models_editor_menu())
        user_states[user_id]["stage"] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    elif stage == "deleting_model":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—è–ª –º–æ–¥–µ–ª—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π.", reply_markup=models_editor_menu())
        user_states[user_id]["stage"] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏.", reply_markup=admin_main_menu())
        user_states.pop(user_id, None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–†–µ–¥–∞–∫—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π"
@router.message(lambda message: message.text == "–†–µ–¥–∞–∫—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π")
async def models_editor(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=models_editor_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å"
@router.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å")
async def add_model(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {"stage": "adding_model"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email –º–æ–¥–µ–ª–∏:", reply_markup=back_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ email –º–æ–¥–µ–ª–∏
@router.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "adding_model" and "email" not in user_states[message.from_user.id])
async def get_model_email(message: types.Message):
    email = message.text.strip()
    user_states[message.from_user.id]["email"] = email
    user_states[message.from_user.id]["stage"] = "adding_model_password"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –º–æ–¥–µ–ª–∏:", reply_markup=back_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –º–æ–¥–µ–ª–∏
@router.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "adding_model_password")
async def get_model_password(message: types.Message):
    password = message.text.strip()
    user_states[message.from_user.id]["password"] = password
    user_states[message.from_user.id]["stage"] = "adding_model_username"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –º–æ–¥–µ–ª–∏:", reply_markup=back_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∏–∫–∞ –º–æ–¥–µ–ª–∏
@router.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "adding_model_username")
async def get_model_username(message: types.Message):
    username = message.text.strip()
    email = user_states[message.from_user.id]["email"]
    password = user_states[message.from_user.id]["password"]

    accounts[email] = {
        "email": email,
        "password": password,
        "username": username
    }
    save_json(ACCOUNTS_FILE, accounts)

    await message.answer(f"‚úÖ –ú–æ–¥–µ–ª—å **{username}** —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=models_editor_menu())
    user_states.pop(message.from_user.id, None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@router.message(lambda message: message.text == "–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")
async def show_models_list(message: types.Message):
    if not accounts:
        await message.answer("–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø—É—Å—Ç.")
        return

    models_list = "\n".join([f"üîπ {acc['username']} ({email})" for email, acc in accounts.items()])
    await message.answer(f"üìú –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π:\n{models_list}")


@router.message(lambda message: message.text == "–†–µ–¥–∞–∫—Ç–æ—Ä —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤")
async def workers_editor(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=workers_editor_menu())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å"
@router.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å")
async def delete_model(message: types.Message):
    if not accounts:
        await message.answer("–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø—É—Å—Ç.", reply_markup=models_editor_menu())
        return

    user_id = message.from_user.id
    user_states[user_id] = {"stage": "deleting_model"}
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=acc["username"])] for acc in accounts.values()] + [
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
@router.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "deleting_model")
async def confirm_delete_model(message: types.Message):
    selected_username = message.text
    email = next(email for email, acc in accounts.items() if acc["username"] == selected_username)

    del accounts[email]
    save_json(ACCOUNTS_FILE, accounts)

    account_folder = os.path.join("data", email)
    if os.path.exists(account_folder):
        import shutil
        shutil.rmtree(account_folder)

    await message.answer(f"‚úÖ –ú–æ–¥–µ–ª—å **{selected_username}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=models_editor_menu())
    user_states.pop(message.from_user.id, None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@router.message(lambda message: message.text == "–†–µ–¥–∞–∫—Ç–æ—Ä —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤")
async def workers_editor(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=workers_editor_menu())


@router.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞")
async def add_worker(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {"stage": "adding_worker"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω —Ä–∞–±–æ—Ç–Ω–∏–∫–∞:", reply_markup=back_menu())

@router.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "adding_worker")
async def get_worker_login(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id]["worker_login"] = message.text
    user_states[user_id]["stage"] = "adding_worker_password"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞:", reply_markup=back_menu())

@router.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "adding_worker_password")
async def get_worker_password(message: types.Message):
    user_id = message.from_user.id
    worker_login = user_states[user_id]["worker_login"]
    worker_password = message.text

    workers = load_json("workers.json")
    workers[worker_login] = {
        "password": worker_password,
        "role": "worker"
    }
    save_json("workers.json", workers)

    await message.answer(f"‚úÖ –†–∞–±–æ—Ç–Ω–∏–∫ **{worker_login}** —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=workers_editor_menu())
    user_states.pop(user_id, None)


@router.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞")
async def delete_worker(message: types.Message):
    workers = load_json("workers.json")
    if not workers:
        await message.answer("–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.", reply_markup=workers_editor_menu())
        return

    user_id = message.from_user.id
    user_states[user_id] = {"stage": "deleting_worker"}
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=login)] for login in workers.keys()] + [
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)


@router.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id]["stage"] == "deleting_worker")
async def confirm_delete_worker(message: types.Message):
    selected_login = message.text
    workers = load_json("workers.json")

    if selected_login in workers:
        del workers[selected_login]
        save_json("workers.json", workers)
        await message.answer(f"‚úÖ –†–∞–±–æ—Ç–Ω–∏–∫ **{selected_login}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=workers_editor_menu())
    else:
        await message.answer("‚ùå –†–∞–±–æ—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=workers_editor_menu())

    user_states.pop(message.from_user.id, None)


@router.message(lambda message: message.text == "–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤")
async def show_workers_list(message: types.Message):
    workers = load_json("workers.json")
    if not workers:
        await message.answer("–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.")
        return

    workers_list = "\n".join([f"üîπ {login} (–†–æ–ª—å: {data['role']})" for login, data in workers.items()])
    await message.answer(f"üìú –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤:\n{workers_list}")


@router.message(lambda message: message.text == "–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏")
async def logout_from_admin(message: types.Message):
    user_id = message.from_user.id

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states.pop(user_id, None)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–∞–ø –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞
    user_states[user_id] = {"stage": "waiting_for_login"}
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏. –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:", reply_markup=types.ReplyKeyboardRemove())